{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Caboose Caboose is a simple, dynamically-typed, interpreted language built on top of a powerful VM. Go ahead and jump right into the getting started guide if you're new around here! License Caboose uses the MIT License for all of its components.","title":"Home"},{"location":"#caboose","text":"Caboose is a simple, dynamically-typed, interpreted language built on top of a powerful VM. Go ahead and jump right into the getting started guide if you're new around here!","title":"Caboose"},{"location":"#license","text":"Caboose uses the MIT License for all of its components.","title":"License"},{"location":"about/license/","text":"License Caboose uses the MIT License, it goes as follows: MIT License Copyright (c) 2020 Caboose Authors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"Caboose uses the MIT License, it goes as follows: MIT License Copyright (c) 2020 Caboose Authors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"language/conditionals-loops/","text":"Conditionals Loops If/Else Statements If-else statements are essential to programming. Caboose's if-else statements reuire brackets. Example: if (true) { print( This code always runs ); } else { print( This code never runs ); } For Loops For loops are the best known kind of loop, and one of the most complicated loop structures there are. For loops accept three parameters in the form of 1; 2; 3 : - The initializer (e.g. var i = 0 ) - The condition (e.g. i 5 ) - The counter (e.g. i = i + 1 ) If you don't pass values to the for loop, and instead pass two semicolons ( ;; ), the loop will go forever. Note: A for loop with one statement in its body can omit its braces. Example: // Create a regular for loop for(var i = 0; i 10; i = i + 1) print(i); // Create an infinite for loop for(;;) print( This loops forever! ) While Loops While loops are much simpler than for loops, although less known. They take one parameter, which is a condition. Note: A while loop with one statement in its body can omit its braces. Example: // Create an infinite while loop while(true) print( This loops forever! ); // Create a regular while loop var i = 0; while(i 10) { print(i); i = i + 1; }","title":"Conditionals & Loops"},{"location":"language/conditionals-loops/#conditionals-loops","text":"","title":"Conditionals &amp; Loops"},{"location":"language/conditionals-loops/#ifelse-statements","text":"If-else statements are essential to programming. Caboose's if-else statements reuire brackets.","title":"If/Else Statements"},{"location":"language/conditionals-loops/#example","text":"if (true) { print( This code always runs ); } else { print( This code never runs ); }","title":"Example:"},{"location":"language/conditionals-loops/#for-loops","text":"For loops are the best known kind of loop, and one of the most complicated loop structures there are. For loops accept three parameters in the form of 1; 2; 3 : - The initializer (e.g. var i = 0 ) - The condition (e.g. i 5 ) - The counter (e.g. i = i + 1 ) If you don't pass values to the for loop, and instead pass two semicolons ( ;; ), the loop will go forever. Note: A for loop with one statement in its body can omit its braces.","title":"For Loops"},{"location":"language/conditionals-loops/#example_1","text":"// Create a regular for loop for(var i = 0; i 10; i = i + 1) print(i); // Create an infinite for loop for(;;) print( This loops forever! )","title":"Example:"},{"location":"language/conditionals-loops/#while-loops","text":"While loops are much simpler than for loops, although less known. They take one parameter, which is a condition. Note: A while loop with one statement in its body can omit its braces.","title":"While Loops"},{"location":"language/conditionals-loops/#example_2","text":"// Create an infinite while loop while(true) print( This loops forever! ); // Create a regular while loop var i = 0; while(i 10) { print(i); i = i + 1; }","title":"Example:"},{"location":"language/data-types/","text":"Caboose Data Types Booleans Booleans consist of true or false , it's as simple as that! It does get a little complicated when falsiness comes into play, so go read there about how it all works. Example: var a = true; var b = false; if (a) { // This code will always run } else { // This code never runs } var c = !a; // False Nil Nil is the caboose equivalent of null . Nil is basically a reference to nothing. Example: var a = nil; print(a); // Prints out nil Numbers Numbers are a common data type among almost all programming languages. A number in Caboose can either be an integer or a decimal. They are stored in the same data type. Example: var a = 0.1; var b = 1; print(a + b); // Prints out 1.1 Strings Strings are an essential component of all programs. They allow you to store text as a variable. Example: var a = Hello, ; var b = world ; // Strings can be joined var c = a + b; // When printed, they print out the text that they store. print(c); // Prints out Hello, world","title":"Data Types"},{"location":"language/data-types/#caboose-data-types","text":"","title":"Caboose Data Types"},{"location":"language/data-types/#booleans","text":"Booleans consist of true or false , it's as simple as that! It does get a little complicated when falsiness comes into play, so go read there about how it all works.","title":"Booleans"},{"location":"language/data-types/#example","text":"var a = true; var b = false; if (a) { // This code will always run } else { // This code never runs } var c = !a; // False","title":"Example:"},{"location":"language/data-types/#nil","text":"Nil is the caboose equivalent of null . Nil is basically a reference to nothing.","title":"Nil"},{"location":"language/data-types/#example_1","text":"var a = nil; print(a); // Prints out nil","title":"Example:"},{"location":"language/data-types/#numbers","text":"Numbers are a common data type among almost all programming languages. A number in Caboose can either be an integer or a decimal. They are stored in the same data type.","title":"Numbers"},{"location":"language/data-types/#example_2","text":"var a = 0.1; var b = 1; print(a + b); // Prints out 1.1","title":"Example:"},{"location":"language/data-types/#strings","text":"Strings are an essential component of all programs. They allow you to store text as a variable.","title":"Strings"},{"location":"language/data-types/#example_3","text":"var a = Hello, ; var b = world ; // Strings can be joined var c = a + b; // When printed, they print out the text that they store. print(c); // Prints out Hello, world","title":"Example:"},{"location":"user/getting-started/","text":"Getting Started with Caboose Installing Head on over to our releases and grab the latest binary for your OS, then come on back! Running the REPL Once you have a binary and have installed it run the REPL by doing: cb Running a file Go ahead and paste this text into your editor and save it as a Caboose file ( *.cb ) fun hello(name) { print( Hello, + name); } hello( world ); Then run it by doing: cb path/to/your/file.cb It should print Hello, world .","title":"Getting Started"},{"location":"user/getting-started/#getting-started-with-caboose","text":"","title":"Getting Started with Caboose"},{"location":"user/getting-started/#installing","text":"Head on over to our releases and grab the latest binary for your OS, then come on back!","title":"Installing"},{"location":"user/getting-started/#running-the-repl","text":"Once you have a binary and have installed it run the REPL by doing: cb","title":"Running the REPL"},{"location":"user/getting-started/#running-a-file","text":"Go ahead and paste this text into your editor and save it as a Caboose file ( *.cb ) fun hello(name) { print( Hello, + name); } hello( world ); Then run it by doing: cb path/to/your/file.cb It should print Hello, world .","title":"Running a file"}]}